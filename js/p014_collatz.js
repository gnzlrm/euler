/**
Code by Gonzalo Rolon Morinelli, Jan 21 2016.

The following code was originally written as a solution for Project Euler's
Problem# 14
For more information, goto: https://projecteuler.net/problem=14
*/

function rcmemCollatzLn(n, kLens) {
    /*
    Return the length of the Collatz sequence generated by n.

    Memoized recursion implementation.
    */
    if (kLens.hasOwnProperty(n)) {
        return kLens[n];
    } else {
        var nextTerm = n % 2 !== 0? 3 * n + 1 : n / 2;
        kLens[n] = rcmemCollatzLn(nextTerm, kLens) + 1;
        return kLens[n];
    }
}

function computeLongestCollatz(n) {
    var maxLen = Number.NEGATIVE_INFINITY;
    var maxNum = -1;
    var kLens = {1: 0};
    for (num = 1; num < n; num++) {
        cLen = rcmemCollatzLn(num, kLens);
        if (cLen > maxLen) {
            maxLen = cLen;
            maxNum = num;
        }
    }
    return maxNum;
}

module.exports.rcmemCollatzLn = rcmemCollatzLn;
module.exports.computeLongestCollatz = computeLongestCollatz;

if (require.main === module) {
    // Problem solution.
    console.log(computeLongestCollatz(1000000));
}
